---
// No se requieren imports SSR aquí
---
<div class="main-card" role="dialog" aria-modal="true" aria-labelledby="perfil-titulo">
  <h2 id="perfil-titulo" class="main-title" tabindex="0">Personaliza tu perfil</h2>
  <form id="perfil-form" autocomplete="off" aria-label="Formulario de perfil">
    <label>Nombre:
      <input type="text" id="nombre" name="nombre" required autocomplete="off" />
    </label>
    <label>Apellidos:
      <input type="text" id="apellidos" name="apellidos" required autocomplete="off" />
    </label>
    <label>Fecha de nacimiento:
      <input type="date" id="fechaNacimiento" name="fechaNacimiento" required autocomplete="off" />
    </label>
    <label>Foto de perfil:
      <input type="file" id="fotoPerfil" name="fotoPerfil" accept="image/*" />
      <img id="preview-foto" src="" alt="Previsualización" class="preview-foto" style="display:none;" />
    </label>
    <button type="submit" aria-label="Guardar cambios">Guardar cambios</button>
  </form>
  <p id="perfil-msg" aria-live="polite" aria-atomic="true"></p>
  <div style="text-align:center;margin-top:1.6rem;">
    <a href="#" id="logout-link" class="logout-link" tabindex="0" role="button" aria-label="Cerrar sesión">Cerrar sesión</a>
  </div>
  <div id="logout-modal" class="logout-modal" style="display:none;" role="dialog" aria-modal="true" aria-labelledby="logout-titulo">
    <div class="logout-modal-content" role="document">
      <h3 id="logout-titulo" class="logout-modal-title" tabindex="0">¿Seguro que quieres cerrar sesión?</h3>
      <div class="logout-modal-actions">
        <button id="cancel-logout" class="btn-cancel" tabindex="0" aria-label="Cancelar">Cancelar</button>
        <button id="confirm-logout" class="btn-main" tabindex="0" aria-label="Cerrar sesión">Cerrar sesión</button>
      </div>
    </div>
  </div>

  <!-- Buzón de invitaciones -->
  <div id="buzon-invitaciones" class="buzon-invitaciones" aria-label="Buzón de invitaciones" tabindex="0" role="region">
    <h3 class="buzon-title">Buzón de invitaciones</h3>
    <div style="margin-bottom:1.2rem;">
      <strong>Pendientes</strong>
      <ul id="lista-invitaciones-pendientes" class="invitaciones-list" role="list">
        <li role="listitem" class="invitacion-vacia">Sin invitaciones pendientes.</li>
      </ul>
    </div>
    <div style="margin-bottom:1.2rem;">
      <strong>Aceptadas</strong>
      <ul id="lista-invitaciones-aceptadas" class="invitaciones-list" role="list">
        <li role="listitem" class="invitacion-vacia">Sin invitaciones aceptadas.</li>
      </ul>
    </div>
    <div style="margin-bottom:1.2rem;">
      <strong>Rechazadas</strong>
      <ul id="lista-invitaciones-rechazadas" class="invitaciones-list" role="list">
        <li role="listitem" class="invitacion-vacia">Sin invitaciones rechazadas.</li>
      </ul>
    </div>
    <p id="msg-invitacion" class="status-message status-success" aria-live="polite" aria-atomic="true"></p>
  </div>

<script type="module" is:inline>
// Unificado: lógica de logout y perfil en un solo bloque

function waitForAuth() {
  return new Promise(resolve => {
    if (window.auth && typeof window.auth.onAuthStateChanged === 'function') {
      resolve(window.auth);
    } else {
      const interval = setInterval(() => {
        if (window.auth && typeof window.auth.onAuthStateChanged === 'function') {
          clearInterval(interval);
          resolve(window.auth);
        }
      }, 50);
    }
  });
}

function waitForStorage() {
  return new Promise(resolve => {
    if (window.storage && typeof window.storage.ref === 'function') {
      resolve(window.storage);
    } else {
      const interval = setInterval(() => {
        if (window.storage && typeof window.storage.ref === 'function') {
          clearInterval(interval);
          resolve(window.storage);
        }
      }, 50);
    }
  });
}

document.addEventListener('DOMContentLoaded', async () => {
  // --- Buzón de invitaciones ---
  const listaPendientes = document.getElementById('lista-invitaciones-pendientes');
  const listaAceptadas = document.getElementById('lista-invitaciones-aceptadas');
  const listaRechazadas = document.getElementById('lista-invitaciones-rechazadas');
  const msgInvitacion = document.getElementById('msg-invitacion');
  let invitacionesUnsub = null;
  await waitForAuth();
  const db = window.db;
  const auth = window.auth;
  // ...
  // (ya declarado arriba, no volver a declarar más abajo)

  auth.onAuthStateChanged(async user => {
    if (user) {
      // Suscripción en tiempo real a TODAS las invitaciones
      if (invitacionesUnsub) invitacionesUnsub();
      invitacionesUnsub = db.collection('users').doc(user.uid).collection('invitations')
        .orderBy('timestamp', 'desc')
        .onSnapshot(async snap => {
          listaPendientes.innerHTML = '';
          listaAceptadas.innerHTML = '';
          listaRechazadas.innerHTML = '';
          let hayPendiente = false, hayAceptada = false, hayRechazada = false;
          if (snap.empty) {
            const li = document.createElement('li');
            li.textContent = 'No tienes invitaciones.';
            li.classList.add('invitacion-vacia');
            listaPendientes.appendChild(li);
            listaAceptadas.appendChild(li.cloneNode(true));
            listaRechazadas.appendChild(li.cloneNode(true));
            return;
          }
          snap.forEach(doc => {
            const data = doc.data();
            const li = document.createElement('li');
            li.classList.add('invitacion-item');
            let estado = '';
            let color = '#888';
            if (data.status === 'pendiente') { estado = 'Pendiente'; color = '#e6b800'; hayPendiente = true; }
            if (data.status === 'aceptada') { estado = 'Aceptada'; color = '#0a0'; hayAceptada = true; }
            if (data.status === 'rechazada') { estado = 'Rechazada'; color = '#b00'; hayRechazada = true; }
            li.innerHTML = `<b>${data.groupName}</b> invitado por <span style='color:var(--color-link);'>${data.invitedBy}</span> <br><span style='font-size:0.9em;color:${color}'>${estado}</span> <span style='font-size:0.9em;color:#888'>${data.timestamp?.toDate ? data.timestamp.toDate().toLocaleString() : ''}</span>`;
            if (data.status === 'pendiente') {
              // Botón aceptar
              const btnAceptar = document.createElement('button');
              btnAceptar.textContent = 'Aceptar';
              btnAceptar.style.marginRight = '1rem';
              btnAceptar.onclick = async () => {
                try {
                  await db.collection('users').doc(user.uid).update({ groupIds: window.firebase.firestore.FieldValue.arrayUnion(data.groupId) });
                  await db.collection('groups').doc(data.groupId).update({ members: window.firebase.firestore.FieldValue.arrayUnion(user.uid) });
                  await db.collection('users').doc(user.uid).collection('invitations').doc(doc.id).update({ status: 'aceptada' });
                  msgInvitacion.textContent = '¡Has aceptado la invitación!';
                  setTimeout(()=>msgInvitacion.textContent='', 3000);
                } catch (err) {
                  msgInvitacion.textContent = 'Error al aceptar: ' + (err.message || err);
                }
              };
              // Botón rechazar
              const btnRechazar = document.createElement('button');
              btnRechazar.textContent = 'Rechazar';
              btnRechazar.onclick = async () => {
                try {
                  await db.collection('users').doc(user.uid).collection('invitations').doc(doc.id).update({ status: 'rechazada' });
                  msgInvitacion.textContent = 'Has rechazado la invitación.';
                  setTimeout(()=>msgInvitacion.textContent='', 3000);
                } catch (err) {
                  msgInvitacion.textContent = 'Error al rechazar: ' + (err.message || err);
                }
              };
              li.appendChild(btnAceptar);
              li.appendChild(btnRechazar);
              listaPendientes.appendChild(li);
            } else if (data.status === 'aceptada') {
              listaAceptadas.appendChild(li);
            } else if (data.status === 'rechazada') {
              listaRechazadas.appendChild(li);
            }
          });
          if (!hayPendiente) { const li = document.createElement('li'); li.textContent = 'Sin invitaciones pendientes.'; li.classList.add('invitacion-vacia'); listaPendientes.appendChild(li); }
          if (!hayAceptada) { const li = document.createElement('li'); li.textContent = 'Sin invitaciones aceptadas.'; li.classList.add('invitacion-vacia'); listaAceptadas.appendChild(li); }
          if (!hayRechazada) { const li = document.createElement('li'); li.textContent = 'Sin invitaciones rechazadas.'; li.classList.add('invitacion-vacia'); listaRechazadas.appendChild(li); }
        });
    }
  });

  await waitForAuth();
  // --- Logout ---
  const logoutLink = document.getElementById('logout-link');
  const logoutModal = document.getElementById('logout-modal');
  const cancelLogout = document.getElementById('cancel-logout');
  const confirmLogout = document.getElementById('confirm-logout');
  logoutLink.onmouseover = () => { logoutLink.style.color = '#4e9fff'; };
  logoutLink.onmouseout = () => { logoutLink.style.color = '#7b61ff'; };
  logoutLink.onclick = (e) => {
    e.preventDefault();
    logoutModal.style.display = 'flex';
  };
  cancelLogout.onclick = () => {
    logoutModal.style.display = 'none';
  };
  confirmLogout.onclick = async () => {
    await waitForAuth();
    await window.auth.signOut();
    window.location.reload();
  };

  // --- Perfil ---
  const form = document.getElementById('perfil-form');
  const msg = document.getElementById('perfil-msg');
  const fotoInput = document.getElementById('fotoPerfil');
  const previewFoto = document.getElementById('preview-foto');
  await waitForStorage();
  const storage = window.storage;
  const storageRef = window.storage.ref; // Compatibilidad con inicialización de window.storage

  // Preview de foto
  fotoInput.addEventListener('change', (e) => {
    const file = fotoInput.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(ev) {
        previewFoto.src = ev.target.result;
        previewFoto.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      previewFoto.style.display = 'none';
    }
  });

  // Cargar datos de perfil
  auth.onAuthStateChanged(async user => {
    if (user) {
      // Leer datos del perfil desde Firestore
      const userRef = db.collection("users").doc(user.uid);
      const userSnap = await userRef.get();
      if (userSnap.exists) {
        const data = userSnap.data();
        document.getElementById('nombre').value = data.nombre || '';
        document.getElementById('apellidos').value = data.apellidos || '';
        document.getElementById('fechaNacimiento').value = data.fechaNacimiento || '';
        if (data.photoURL) {
          previewFoto.src = data.photoURL;
          previewFoto.style.display = 'block';
        }
      } else {
        // Si no hay datos en Firestore, usar los de Auth
        document.getElementById('nombre').value = user.displayName?.split(' ')[0] || '';
        document.getElementById('apellidos').value = user.displayName?.split(' ').slice(1).join(' ') || '';
        if (user.photoURL) {
          previewFoto.src = user.photoURL;
          previewFoto.style.display = 'block';
        }
      }
    }
  });

  // Guardar cambios de perfil
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    msg.textContent = '';
    const user = auth.currentUser;
    if (!user) {
      msg.textContent = 'Debes iniciar sesión.';
      return;
    }
    const nombre = document.getElementById('nombre').value.trim();
    const apellidos = document.getElementById('apellidos').value.trim();
    const fechaNacimiento = document.getElementById('fechaNacimiento').value;
    let photoURL = user.photoURL;

    // Subir foto si hay nueva
    const fotoInput = document.getElementById('fotoPerfil');
    const storage = window.storage;
    if (fotoInput && fotoInput.files.length > 0) {
      const file = fotoInput.files[0];
      const fileRef = storage.ref(`perfiles/${user.uid}/fotoPerfil.jpg`);
      await fileRef.put(file);
      photoURL = await fileRef.getDownloadURL();
    }

    try {
      await db.collection("users").doc(user.uid).set({ nombre, apellidos, fechaNacimiento, photoURL }, { merge: true });
      await user.updateProfile({ displayName: nombre + ' ' + apellidos, photoURL });
      msg.textContent = 'Perfil actualizado correctamente.';
    } catch (error) {
      msg.textContent = 'Error al actualizar el perfil: ' + (error.message || error);
    }
  });

  // Preview de foto
  fotoInput.addEventListener('change', (e) => {
    const file = fotoInput.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(ev) {
        previewFoto.src = ev.target.result;
        previewFoto.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      previewFoto.style.display = 'none';
    }
  });

  // Cargar datos de perfil
  auth.onAuthStateChanged(async user => {
    if (user) {
      // Leer datos del perfil desde Firestore
      const userRef = db.collection("users").doc(user.uid);
      const userSnap = await userRef.get();
      if (userSnap.exists) {
        const data = userSnap.data();
        document.getElementById('nombre').value = data.nombre || '';
        document.getElementById('apellidos').value = data.apellidos || '';
        document.getElementById('fechaNacimiento').value = data.fechaNacimiento || '';
        if (data.photoURL) {
          previewFoto.src = data.photoURL;
          previewFoto.style.display = 'block';
        }
      } else {
        // Si no hay datos en Firestore, usar los de Auth
        document.getElementById('nombre').value = user.displayName?.split(' ')[0] || '';
        document.getElementById('apellidos').value = user.displayName?.split(' ').slice(1).join(' ') || '';
        if (user.photoURL) {
          previewFoto.src = user.photoURL;
          previewFoto.style.display = 'block';
        }
      }
    }
  });

  // Guardar cambios de perfil
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    msg.textContent = '';
    const user = auth.currentUser;
    if (!user) {
      msg.textContent = 'Debes iniciar sesión.';
      return;
    }
    const nombre = document.getElementById('nombre').value.trim();
    const apellidos = document.getElementById('apellidos').value.trim();
    const fechaNacimiento = document.getElementById('fechaNacimiento').value;
    let photoURL = user.photoURL;

    // Subir foto si hay nueva
    const fotoInput = document.getElementById('fotoPerfil');
    const storage = window.storage;
    if (fotoInput && fotoInput.files.length > 0) {
      const file = fotoInput.files[0];
      const fileRef = storage.ref(`perfiles/${user.uid}/fotoPerfil.jpg`);
      await fileRef.put(file);
      photoURL = await fileRef.getDownloadURL();
    }

    try {
      await db.collection("users").doc(user.uid).set({ nombre, apellidos, fechaNacimiento, photoURL }, { merge: true });
      await user.updateProfile({ displayName: nombre + ' ' + apellidos, photoURL });
      msg.textContent = 'Perfil actualizado correctamente.';
    } catch (error) {
      msg.textContent = 'Error al actualizar el perfil: ' + (error.message || error);
    }
  });
});
</script>
<style>
@import url('/src/styles/global.css');




.perfil-container {
  background: var(--color-bg-alt);
  color: var(--color-text);
  border-radius: 1.2rem;
  box-shadow: var(--color-shadow);
  padding: 2.5rem 2rem 1.3rem 2rem;
  min-width: 320px;
  max-width: 420px;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  gap: 1.1rem;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
}
.btn-cancel:hover {
  background: var(--color-link-hover);
  color: #fff;
}
.btn-main {
  padding: 0.6rem 1.5rem;
  background: var(--color-btn-main-bg);
  color: var(--color-btn-main-text);
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  outline-offset: 2px;
  outline-width: 2px;
  transition: background 0.2s, color 0.2s;
}
.btn-main:hover {
  background: linear-gradient(90deg, #4e9fff 0%, #7b61ff 100%);
}
.buzon-invitaciones {
  margin-top: 2.5rem;
}
.buzon-title {
  color: var(--color-text);
  font-size: 1.1rem;
  text-align: left;
}
.invitaciones-list {
  list-style: none;
  padding-left: 0;
}
.invitacion-vacia {
  margin-bottom: 1.2rem;
}
.status-message {
  margin: 0.5rem 0 0 0;
  font-size: 1rem;
  text-align: center;
}
.status-success {
  color: var(--color-success);
}
.status-error {
  color: var(--color-error);
}
@media (max-width: 480px) {
  .perfil-container {
    min-width: unset;
    padding: 1.2rem 0.5rem;
    max-width: 98vw;
  }
  .logout-modal-content {
    max-width: 99vw;
  }
}

  #logout-link {
    display: inline-block;
    margin-top: 0.8rem;
    color: var(--color-link);
    font-weight: 600;
    text-decoration: underline;
    font-size: 1rem;
    transition: color 0.2s;
  }
  #logout-link:hover {
    color: var(--color-link-hover);
  }
  #logout-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0,0,0,0.6);
    z-index: 2000;
    justify-content: center;
    align-items: center;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0,0,0,0.6);
  z-index: 2000;
  justify-content: center;
  align-items: center;
}
#logout-modal > div {
  background: var(--color-bg-alt);
  padding: 2.1rem 2rem 1.3rem 2rem;
  border-radius: 1.2rem;
  box-shadow: var(--color-shadow);
  max-width: 95vw;
  min-width: 320px;
  text-align: center;
}
#logout-modal h3 {
  margin-bottom: 1.2rem;
  color: var(--color-text);
  font-size: 1.2rem;
}
#logout-modal button {
  padding: 0.6rem 1.5rem;
  background: var(--color-bg);
  color: var(--color-link);
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  outline-offset: 2px;
  outline-width: 2px;
  margin-right: 0.5rem;
  transition: background 0.2s, color 0.2s;
}
#logout-modal button#confirm-logout {
  background: var(--color-link);
  color: #fff;
}
#logout-modal button#confirm-logout:hover {
  background: var(--color-link-hover);
}
#logout-modal button#cancel-logout:hover {
  background: var(--color-bg-alt);
  color: var(--color-link-hover);
}
#buzon-invitaciones {
  margin-top: 2.5rem;
  overflow-y: auto;
  max-height: 40vh;
}
#buzon-invitaciones h3 {
  color: var(--color-heading);
  font-size: 1.1rem;
  text-align: left;
}
#buzon-invitaciones ul {
  list-style: none;
  padding-left: 0;
}
#buzon-invitaciones li {
  margin-bottom: 1.2rem;
}
#msg-invitacion {
  color: var(--color-link-hover);
  font-weight: 600;
  text-align: center;
}
@media (max-width: 600px) {
  .perfil-container {
    max-width: 98vw;
    min-width: unset;
    padding: 1.2rem 0.5rem 1.2rem 0.5rem;
  }
  #logout-modal > div {
    max-width: 99vw;
    min-width: unset;
  }
  .perfil-container h2 {
    font-size: 1.1rem;
  }
}

@media (max-width: 600px) {
  .perfil-container {
    max-width: 98vw;
    min-width: unset;
    padding: 1.2rem 0.5rem 1.2rem 0.5rem;
  }
}

#buzon-invitaciones {
  margin-top: 2.5rem;
  overflow-y: auto;
  max-height: 40vh;
}

#perfil-usuario-modal {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: #0008;
  z-index: 1000;
}

#perfil-usuario-modal > div {
  position: relative;
  margin: auto;
}

@media (max-width: 480px) {
  #perfil-usuario-modal > div {
    max-width: 99vw;
    min-width: unset;
  }
}

/* El header y el botón cerrar siempre visibles */
#perfil-usuario-modal h2 {
  position: sticky;
  top: 0;
  background: #fff;
  z-index: 2;
  padding-top: 1.2rem;
}
#cerrar-perfil-modal {
  position: absolute;
  top: 1.1rem;
  right: 1.1rem;
  z-index: 3;
}
.perfil-container h2 {
  text-align: center;
  margin-bottom: 1.5rem;
}
.perfil-container label {
  font-size: 1rem;
  margin-bottom: 0.6rem;
  display: flex;
  flex-direction: column;
  gap: 0.2rem;
}
.perfil-container input[type="text"],
.perfil-container input[type="date"],
.perfil-container input[type="file"] {
  padding: 0.65rem 1rem;
  border: 1.5px solid var(--color-border);
  border-radius: 0.5rem;
  font-size: 1rem;
  background: var(--color-bg-alt);
}
.perfil-container button[type="submit"] {
  margin-top: 1.2rem;
  width: 100%;
  background: var(--color-btn-main-bg);
  color: #fff;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  padding: 0.8rem 0;
  cursor: pointer;
  transition: background 0.2s;
}
.perfil-container button[type="submit"]:hover {
  background: linear-gradient(90deg, #4e9fff 0%, #7b61ff 100%);
  margin: 2rem auto;
  padding: 2rem 1.5rem;
  background: #fff;
  border-radius: 1.2rem;
  box-shadow: 0 2px 16px 0 #0001;
  max-width: 400px;
  display: flex;
  flex-direction: column;
  align-items: center;
}
.perfil-container h2 {
  margin-bottom: 1.2rem;
}
.perfil-container form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  width: 100%;
}
.perfil-container label {
  display: flex;
  flex-direction: column;
  font-size: 1rem;
}
.perfil-container input[type="text"],
.perfil-container input[type="date"],
.perfil-container input[type="file"] {
  padding: 0.7rem 1rem;
  border-radius: 0.45rem;
  border: 1.5px solid var(--color-border);
  margin-top: 0.3rem;
  background: var(--color-bg);
  color: var(--color-text);
  font-size: 1rem;
  transition: border-color 0.2s, background 0.2s;
}
.perfil-container input[type="text"]:focus,
.perfil-container input[type="date"]:focus,
.perfil-container input[type="file"]:focus {
  outline: none;
  border-color: var(--color-link);
  background: var(--color-bg-alt);
}
.perfil-container input[type="date"]::-webkit-input-placeholder,
.perfil-container input[type="text"]::-webkit-input-placeholder {
  color: #888;
  opacity: 1;
}
.perfil-container input[type="date"]::placeholder,
.perfil-container input[type="text"]::placeholder {
  color: #888;
  opacity: 1;
}
@media (prefers-color-scheme: dark) {
  .perfil-container input[type="text"],
  .perfil-container input[type="date"],
  .perfil-container input[type="file"] {
    background: #22263a;
    color: #e8eaf3;
    border: 1.5px solid #353a4a;
  }
  .perfil-container input[type="date"]::-webkit-input-placeholder,
  .perfil-container input[type="text"]::-webkit-input-placeholder {
    color: #b3b8d1;
  }
  .perfil-container input[type="date"]::placeholder,
  .perfil-container input[type="text"]::placeholder {
    color: #b3b8d1;
  }
}
.perfil-container button {
  margin-top: 1.2rem;
  padding: 0.7rem;
  border: none;
  border-radius: 8px;
  background: var(--color-link);
  color: #fff;
  font-weight: bold;
  cursor: pointer;
  transition: background 0.2s;
}
.perfil-container button:hover {
  background: var(--color-link-hover);
}
#perfil-msg {
  margin-top: 0.8rem;
  color: var(--color-link-hover);
  font-weight: 600;
  text-align: center;
}
</style>
